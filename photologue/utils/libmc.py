# Copyright 2009 Andreas Balogh

#Boost Software License - Version 1.0 - August 17th, 2003
#
#Permission is hereby granted, free of charge, to any person or organization
#obtaining a copy of the software and accompanying documentation covered by
#this license (the "Software") to use, reproduce, display, distribute,
#execute, and transmit the Software, and to prepare derivative works of the
#Software, and to permit third-parties to whom the Software is furnished to
#do so, all subject to the following:
#
#The copyright notices in the Software and this entire statement, including
#the above license grant, this restriction and the following disclaimer,
#must be included in all copies of the Software, in whole or in part, and
#all derivative works of the Software, unless such copies or derivative
#works are solely in the form of machine-executable object code generated by
#a source language processor.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
#SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
#FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
#ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#DEALINGS IN THE SOFTWARE.
 
import datetime
import mmap
import struct

        #unix_mod_mtime = os.stat(mod_fp).st_mtime
        #mod_mtime = datetime.datetime.fromtimestamp(unix_mod_mtime)
        #mod_size_bytes = os.stat(mod_fp).st_size

DAR_SQUARE = 0x10
DAR_TV = 0x20
DAR_WIDESCREEN = 0x30
MPG_SEQ_HEADER = "\x00\x00\x01\xb3"

def set_mpg_dar(fn, dar = DAR_WIDESCREEN):
    """ change aspect ratio in all sequence headers in mpg file
    - sequence header starts with 00 00 01 B3
    - aspect ratio is encoded in upper nibble at byte with offset 7
        Value    Aspect Ratio
        0        'forbidden'
        1        1:1 Square Pixels
        2        4:3 Display
        3        16:9 Display
        4        2.21:1 Display
        5-15    'reserved'
    
    @param file: mpg file name
    @see:        http://www.fr-an.de/fragen/v06/01_02_02.htm
    """
    with open(fn,"r+b") as fh:
        mpg = mmap.mmap(fh.fileno(), 0)
        try:
            i = mpg.find(MPG_SEQ_HEADER, 0)
            while i >= 0:
                b7 = ord(mpg[i + 7])
                nb7 = (b7 & 0x0f) | dar
                mpg[i + 7] = chr(nb7)
                i = mpg.find(MPG_SEQ_HEADER, i + 1)
        finally:
            mpg.close()

def get_moi_details(input):
    """ get recording details from moi file
        
    @param file:  moi file name
    @return:      dictionary containing data from MOI file
    @see:         http://en.wikipedia.org/wiki/MOI_(file_format)
    """    
    md = { }
    if type(input) == str:
        if len(input) < 129:
            raise Exception("MOI details: Input string too short")
        b = input
    else:
        #with open(input,"rb") as fh:
        try:
            b = input.read(129)
        except:
            raise Exception("MOI details: Input file too short")
    if b[0:2] == "V6":
        # WARNING: format length may depend on platform
        fmt = "!2sxxhhbbbbxxi"
        if struct.calcsize(fmt) != 18:
            raise Exception("MOI details: invalid struct length; adjust unpack format")
        vals = struct.unpack(fmt, b[0:18])
        version, filesize, year, month, day, hour, minute, duration = vals
        md["version"] = version
        md["filesize"] = filesize
        md["datetime"] = datetime.datetime(year, month, day, hour, minute, 0) + datetime.timedelta(milliseconds=duration)
        md["duration"] = duration
    else:
        raise Exception("MOI details: unsupported MOI version %s in [%s]" % (b[0:2], fn))
    md["video_format"] = ord(b[128]) & 4
    return md
